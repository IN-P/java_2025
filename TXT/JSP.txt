■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터네트워크
- 클라이언트 ↔ 서버
- 1)  Web    프로그래밍 (Http 통신)   단방향통신 
     ( Client요청시 Server응답 후종료)
- 2)  Socket 프로그래밍 (채팅)           양방향통신 
     ( 특정port를 통해 실시간으로 정보를 주고 받음 - 계속연결되어 있음)

2. WS VS WAS
- WS (Web Server) : 정적콘텐츠 (html,css,js) 웹브라우저에 제공
  예) Apache
- WAS (Web Application Server) : 동적콘텐츠
  브라우저와 dbms 사이에 동작하는 미들웨어
  예) Apache + tomcat

3. tomcat
>> Http request(요청) > Catalina(해결사) > Context > Servlet > response

3-1) http request(요청)
3-2) Coyte 가 해결사찾기 : http요청을 처리할 웹어플리케이션(context)
                          web.xml 파일내용을 참고해서 요청전달.
3-3) Catalina (Servlet)
3-4) Jasper (Jsp Engine) : java+html 페이지 요청처리 응답(response)

D:\fullstack\java_2025\tomcat-9.0.95\apache-tomcat-9.0.95\work\Catalina\localhost\jsp_basic\org\apache\jsp

■2. JSP
1. JSP 기본요소
- HTML + JAVA
1)스크립트립 : <% %> 자바코드
2)지시자 : <%@ %>
3)주석 : <%-- --%>
4)표현 : <%= %> 출력
5)선언 : <!% %> 선언

2.FORM
: 서버쪽으로 정보전달
  action="요청처리" 
  method="요청처리방식"(get,post) 
  name="데이터보관이름"

3.쿼리스트링
https://www.google.com/search?q=apple
- url 뒤에 입력데이터를 함께 제공하는 데이터 전달방법
- get방식

- 클라이언트[#] ↔ 서버

4. request.getParameter("name값")
- 클라이언트 ↔ 서버[#]
- request.getParameter("q")

■3. 내장객체 
1. request (요청)
  - request.getParameter("name")        값한개
  - request.getParameterValues("name")  값여러개 - checkbox

2. response (응답)
  - response.sendRedirect("처리경로") 
    * response/request가 유지가 안됨.
    * 같은 처리 alert 출력안됨.
    ※ location.herf / meta http-equiv='refresh' content='초; url=경로'
  - request.getRequestDispatcher("경로").forward(request,response);
    * 요청과 응답을 위임
    * response/request가 유지가 됨.

3. scope 범위
  [ application(애플리케이션) > session(브라우저) > request(요청) > pageContext(페이지) ]

4. session
  - http 프로토콜 ( 데이터요청 - 응답을 받게 되면 바로 종료)
  - 서버측에 저장되는 정보
  - 보안

5. cookie
  - 클라이언트 측에 저장되는 정보
  - 보안상에 취약

6. error
  - 4xx (클라이언트측 오류) / 404 페이지찾을 수 없음
  - 5xx (서버측 오류) / 500 자바코드상에 오류
  - web.xml 에러설정
  
7. out 
  - 출력

■4. mvc1 vs mvc2
1. MVC
  - 서로 영향없이 쉽게 고칠 수 있는 애플리케이션
  - M : 애플리케이션의 정보 (db정보, dto, dao, 비지니스 login 포함)
  - V : view 사용자가 사용하는 화면
  - C : controller model과 view 사시의 상호작용 관리
2. mvc1 vs mvc2
  - mvc1 - controller 역할을 jsp가 담당
  - mvc2 - controller 역할을 servlet이 담당

■5. dbcp
1. dbcp
  - 분산응용프로그램

2. 실습

1) 다운로드
  https://commons.apache.org/
  검색 commons - dbcp, pool, collections
2) [WEB_INF] - [lib] - .JAR
3) DBCP - JAVA파일 만들기
  https://tomcat.apache.org/

■server.xml
<Context>
  <Resource name="jdbc/mbasic" auth="Container" type="javax.sql.DataSource"
  maxTotal="100" maxIdle="30" maxWaitMillis="10000"
  username="root" password="1234" driverClassName="com.mysql.cj.jdbc.Driver"
  url="jdbc:mysql://localhost:3306/mbasic"/>
</Context>

■web.xml
<resource-ref>
  <description>DB Connection</description>
  <res-ref-name>jdbc/mbasic</res-ref-name>
  <res-type>javax.sql.DataSource</res-type>
  <res-auth>Container</res-auth>
</resource-ref>

■DBCP연동
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/mbasic");
Connection conn = ds.getConnection();


Q1. mvc 란?
- 모델 뷰 컨트롤러
→ 서로 영향없이 쉽게 고칠 수 있는 애플리케이션

Q2. mvc1 vs  mvc2 란?
→ 컨트롤러 역할을 jsp가 담당하냐 servlet이 담당하냐

Q3. DBCP란?
→ 분산응용프로그램
→ db커텍션 객체를 미리 (pool)에 생성해두고 사용
→ 데이터베이스 과부화 줄이기

Q4. jsp는   ( html )  + ( java )    
     mvc에서의 역할은?
→ 뷰

Q5.  servlet 은  (  java  ) 
     mvc에서의 역할은?
→ 컨트롤러

Q6. DBCP를 설정하는 방법을 설명하시오.
→ jar 3개다운로드 - dbcp, collections, pool
→ Server - [server.xml] pool 설정 <Resource/>
→ 진행프로젝트 - [webapp] - [web-inf] - web.xml <resource-ref>
→ test 파일

Q7.  dynamic web project에서 jsp 가 위치하는 영역은  ( 웹앱 )   , 
servlet이 위치하는 영역은 (  자바 리소스 ) , 
라이브러리들 .jar 파일들이 들어가는위치는 (  [web-inf] - lib  ) 

Q8.  request 가오면 ( [web-inf] - web.xml )  파일을 참고해서 controller를 찾는다.

Q9.  로그인 후 id를 유지하려고하면 (  세션  )  를 이용한다.
      셋팅이름은  username , 값은 name변수로  지정하시오.
→   session.setAttribute("username", name); 

Q10.  application scope의 범위를 적으시오.
→  application > session > request > pageContext

■ PART002
#1. frontcontroller board 게시판완성
#2. 개발사이트 api + ajax
#3. [숙제] - api 2개이상 / upgrade 기능업그레이드

1) dunamic web pronject- JOAbooks
2) inc - header / footer
3) error page 설정 - 404 , 500
4) dbcp 연동

DB : table명 - board
글번호   bno      int        not null,auto_increment pk
글제목   btitle      varchar(1000) not null
글내용   bcontent      text         not null
글쓴이    bname      varchar(100)   not null
조회수   bhit      int                      default(0)
글쓴날짜  bdate      timestamp     not null  default current_timestamp
아이피   bip      varchar(100)   not null

-글pw   bpw


DTO           : [com.company.domain] - BoardVO private
DBManager :  [com.company.dbmanager] - DBManager
DAO          : [com.company.dao] - BoardDao
............................................................................................................................................................
글쓰기: 
insert into board (btitle, bcontent, bname, bip) values (?,?,?,?);

최신글읽기:
select * from board order by bno desc >> 늦게 올릴수록 bno값 커지니까

해당글읽기:
select * from board where bno=?
 조회수: update board set bhit=bhit+1 where bno=? 

해당글수정
 수정폼 : select * from board where bno=?
update board set btitle=? bcontent=? where bno=?

해당글삭제
delect from board where bno=?
..................................................................................................................................................................
executeQuery - select (표)
executeUpdate - insert, update, delete (실행줄수)

리턴값 메서드명() {}  


  1. 글쓰기             -  insert   into  board (  btitle  , bcontent, bname , bip   )  values (  ?,?,?,?  )
- public int insert( BoardVO vo){ result 0; }

  2. 최신글읽기       -  select * from board order by bno desc
- public ArrayList<BoardVO> selectAll(){ result null; }

  3. 해당글읽기/해당글수정폼        -  select * from board where  bno =?
- public BoardVO select( int bno ){ return null; }

  4. 조회수증가       -  update board  set  bhit=bhit+1  where  bno=?
- public int updateHit( int bno ){ return 0; }

  5. 해당글수정기능 -  update  board  set  btitle=? , bcontent=?  where bno=?
- public int update ( BoardVO vo) { return 0; }

  6. 해당글삭제       -  delete   from board  where bno=?
- public int delect(int bno) { return 0; }


test 

[com.company.controller] - [FrontController]   *.do

[클라이언트 요청]   
↓
index.jsp  ->  *.do   [FrontController]
       ㄴ  /list.do           - C:전체리스트        BList        /      V:list.jsp 
       ㄴ  /write_view.do - C:X                                          V:write.jsp 
       ㄴ  /write.do        - C:글삽입             BWrite(알림창- 성공/실패) /   V: /list.do
       ㄴ  /detail.do      - C:해당번호 상세보기  BDetail(조회수올리기/해당글상세)
                                      V:detail.jsp
       ㄴ  /edit_view.do  - C:해당번호 글수정폼  BEditView(해당글상세)
                                      V:edit.jsp
       ㄴ  /edit.do       - C:해당번호 글수정기능 BEdit(해당글수정)
                                      V: /detail.do 
       ㄴ  /delete.do     - C:해당번호 글삭제기능 BDelete(해당글삭제)      V: /list.do