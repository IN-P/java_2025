■ Step1. project
   - enc UTF-8
   - project


■ Step2. setting (properties)
>>before
##############################
##		boot SETTING		##
##############################
# WebApplication

# Banner Setting

# DataSource

# Jpa

# Logging

# Thymeleaf

- dto(lombok)

연습) boot002 project 만들기
  1) application 설정
      context-path=/boot2
      포트번호 8282
      application-type= web으로 설정
  2) @Controller @ResponseBody 설정해서
    localhost:8282/boot2/ex1 접속시 - springboot 출력

  3) @Controller 설정해서
    RequestMapping("/ex2") - model 설정 test,ex2
    localhost:8282/boot2/ex2 접속시 - model 에서 설정한 ex2 출력


■ Step3. DB연동
  - jpa
    1) application.properties
    2) @Entity - Dto / 테이블만들기
    3) @Repository - Dao


■ Step4. view
1. pom.xml 셋팅확인
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<!--  https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect  -->
<!--  추가  -->
<dependency>
<groupId>nz.net.ultraq.thymeleaf</groupId>
<artifactId>thymeleaf-layout-dialect</artifactId>
</dependency>
<!--  추가  -->

2. application.properties 설정확인
# Thymeleaf Setting
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

3. layout
4. 화면설정

■ Step5. borad

■ Step6. security


Q1.  springboot 프로젝트 생성시  
      package 를  com.thejoa.books로 설정했다. component-scan이 설정된 범위는?
     > com.thejoa.books  포함한 하위패키지모두

Q2.  spring boot를 java 또는 web 버젼으로 사용하는 것이 가능하다. 설정파일의 이름은?
     >  application.properties

Q3.  spring을 web버젼으로 사용하려고한다.    spring.main.web-application-type=  설정은?
      application.properties
      > spring.main.web-application-type=servlet   ( web )
      spring.main.web-application-type=none     ( java )

Q4.  위의 패키지에 @ResponseBody를 이용하여   /test1  에 다음과 같이 출력되도록만드려고한다.
     localhost:8181/boot1/test1    브라우저에 hello출력
     @Controller 파일을 설정하시오.

     >  com.thejoa.books.controller   
   
     @Controller
     public class TestController{
   @GetMapping("/test1")
   @ResponseBody     // 비동기데이터처리
   public String test1(){  return "hello"; }
     }


     
Q5. jpa 설정시  spring.jpa.hibernate.ddl-auto=create   또는  
                      spring.jpa.hibernate.ddl-auto=update 가 있다.  두개의 차이점은?

   spring.jpa.hibernate.ddl-auto=create     >  기존테이블 삭제하고 다시 만들기
              spring.jpa.hibernate.ddl-auto=update    >  기존테이블의 수정된부분만 추가



Q6. jpa를 이용하여 team 테이블을 만들려고 한다.   entity를 작성하시오.
-----------------------------------------------------------------------
id             bigint        기본키   숫자자동증가
name        varchar(255)
createDate  datetime
-----------------------------------------------------------------------

@Entity
@Getter
@Setter    
public class Team{
     @Id   
     @GeneratedValue(  strategy=GenerationType.IDENTITY  )
     private Long id;
     private String name;     
     private LocalDateTime  createDate = LocalDateTime.now();       
}
mysql> desc team;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | bigint       | NO   | PRI | NULL    | auto_increment |
| create_date | datetime(6)  | YES  |     | NULL    |                |
| name        | varchar(255) | YES  |     | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

Q7.   team의 crud를 사용할수 있게  repository를 작성하시오.
   public interface   TeamRepository  extends JpaRepository<Team, Long>{}

   insert into team  (name  ,create_date      )  values (?,?);
   select * from team
   select * from team  where id=?
   update  team  set  name=?   where id=?
   delete from team  where id=?
   

Q8.   class Team 엔티티와  class Member 엔티티에 외래키를 설정하려고한다.
  >>팀은 많은 멤버를 가진다.  를 이용하여   team -|------∈ member
  Team 클래스에서 설정할부분은?        @OneToMany
  
  Member 클래스에서 설정할 부분은?   @ManyToOne
  
Q9. springboot에서 jsp 대신에 사용하는 템플릿은? (   html ->  thymeleaf ) 

#1. 반복 : <div th:each="dto, state : $(list)"> ${dto.id}</div>
#2. 동적문자열: <h3 th:text="${dto.name}"></h3>
#3. 링크         : <a th:href="@{/board/list></a>
         <a th:href="@{|/board/detail/${dto.id}|}}"></a>
         <form th:action="@{/board/insert}">
→ 

Q1.  springboot  thymeleaf를 이용하여  서버로부터 list를 넘겨받아 게시판의 반복문을 작성하려고 한다.  

<tr th:each="dto,state:${list}">
   <td><a  th:href="@{|/board/detail/${dto.id}|}" th:text="${dto.btitle}></a></td>  
   <!-- 1-1. 제목 btitle -->
   <!-- 1-2.  /board/detail 경로의 해당 id로 이동  -->
   <td  th:text="${dto.member.name}"></td>  
   <!-- 1-3. 작성자 member객체안의 name   -->
</tr> 

   
Q2.  thymeleaf 에서 a태그에  /board/list경로로 링크를 걸려고 한다.  
<a   th:href="@{/board/list}"   class="btn btn-outline-primary btn-block">목록보기</a>


Q3.  form 태그에서  /board/delete로  action을 설정하려고 한다. 들어갈 코드는?
<form  th:action="@{/board/delete}"  method="post" id="writeForm"
   onsubmit="return  form()">
   <div class="my-3">
      <label for="bpass" class="form-label">비밀번호</label> <input
         type="text" name="bpass" id="bpass" class="form-control">
   </div>
   <div class="my-3  text-end">
      <input type="submit" value="입력" class="btn btn-primary btn-block">
   </div>
</form>

#3.  글검색부분은  작성자 및 글제목으로도 가능하게 [도전!]
※ 참고)
select  distinct b  
from Board b  left  join   Member m  on  b.member = m
where    b.title       like  %:key%  
       or  b.content  like  %:key%  
       or  m.name    like  %:key%  


■ Step6. security
1. spring security?
1) 애플리케이션의 보안(인증,인가) 담당
2) filter의 흐름에 따라 처리

2. 인증 vs 인가
1) 인증 - 본인이 맞는지 확인        여권)-본인이 맞는지 인증
2) 인가 - 인증된 사용자가 접근가능   조종석까지 가기(X)

3.  spring security 아키텍쳐(1)
1) 사용자가 로그인폼 로그인 시도 (username + password 전달)
2) UsernamePasswordAuthentication 요청정보 - Authentication 생성
3) Authentication 인증처리

10) 인증완료 (사용자정보) SecurityContextHolder에 담기
  - AuthenticationSuccessHandler 성공!
  - AuthenticationFailureHandler 실패!

3.  spring security 아키텍쳐(2)
4) Authentication Manager 인증담당
  - UsernamePasswordAuthentication Token은 provider를 찾는데 사용
5) AuthenticationProvider - 로그인정보와 db정보를 비교
6) UserDetailService - db에 있는 사용자 정보 가져오기


[실습]
1. spring project > pom.xml
2. localhost:8080/login 로그인창 - 인증 (본인확인)
3. SecurityConfig.java - 설정
4. Member @Entity
5. MemberRepository - crud(Dao)
6. MemberService
7. Controller
8. View








