1. SPRING?


-------------------------------------------------------
#1. SPRING?
-------------------------------------------------------
▶Step0. jsp
1. mvc1 - jsp ( controller ) 역할
2. mvc2 - servlet (controller) 역할
3. frontcontroller

▶Step1. framework
1. framework [ 디자인패턴 + 라이브러리 = 프레임워크 ]
2. 소프트웨어 개발의 뼈대 역할

▶Step2. ioc + di
1. ioc
- inversion of control
- 제어의 역전
- 인스턴스의 생성~소멸까지 생명주기를 개발자가 아니라 컨테이너가 하는 것
- pojo ( plain old java object )

  class A{}
  A a1 = new A()

  생성 → 초기화 → 서비스 → 소멸
   ↑                                   ↓
    --------------------------------
   
    ioc가 아닌경우 - [ 개발자★ → ( Class A )
                       → ( Class B )
               → ( Class C )      ] 컨테이너

    ioc인 경우 - [ 개발자 ← ( Class A )
                 ← ( Class B )
         ← ( Class C )★    ]컨테이너


2. di ( dependency injection : 의존성주입 )
- 각 클래스간의 의존관계를 [설정파일]을 통해 [컨테이너]가 자동으로 연결
  장점 : 코드 단순화 / 결합도 제거




▶Step3. 실습
==================================
실습(1) 설치
==================================
* 버전다운그레이드
0. java.sun.com - java11
   C:\Program Files\Java\jdk-11
java_home 11로바꾸기
path javahome 맨위로

1. 스프링 3버전 다운로드
2. 다운로드 경로
https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3
3. 압축 - 경로짧게 / 공백, 한글, 특수기호(-) 경로에 있으면 빼기

==================================
실습(2) spring setting
==================================

    1. dynamic web project - spring000
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4

    구조확인
   1. pom.xml            설치 다운로드
   2. src/main/java      실제 자바파일 위치
   3. src/test/java        실제 테스트파일 위치
   4. src/main/webapp  jsp파일 위치

연습문제) spring001_di 프로젝트 만들기


==================================
실습(3) spring mvc
==================================
1. 검색: spring
2. legacy project
3. mvc project

※플러그인
 \.metadata\.plugins\org.springsource.ide.eclipse.commons.content.core

※import 해서 완성된 파일 가져오기

==================================
실습(4) spring 정리
==================================
1. 프레임워크
  - 소프트웨어 개발의 뼈대 역할 [ 디자인패턴 + 라이브러리 ]
2. IOC
   - 인스턴스 생성부터 소멸까지 생명주기를 스프링이 관리
3. DI
  - 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동으로 연결 
4. BEAN
  - 스프링이 관리하는 객체
  - beanFactory ← ApplicationContext


==================================
실습(4) spring di 연습
==================================
    1. dynamic web project - spring002_di_ex
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4
    6. pom.xml 세팅 update maven까지!

7. 
    [AnimalFarm]  (사용)→    [<<interface>>Animal]   
   ↑(삽입)        ↑(구현)       ↑ (구현)   
    [beans.xml ]  (생성)→     [Cat     /   Dog]

>> di? 각클래스의 의존관계를 [설정파일]을 통해서 컨테이너(spring)가 자동연결

  1) 인터페이스
     com.company.ioctest  
   interface Animal
   ----------------------------------
   public interface Animal {
      public String eat();
      public String sleep();
      public String poo();
   }
   ----------------------------------

   2) 구현클래스  
      com.company.ioctest  
      Cat 
      Dog  
   
   package com.company.ioc;
   public class Cat  implements Animal{
      @Override public String eat() { return "Cat-eat"; }
      @Override public String sleep() { return "Cat-sleep"; }
      @Override public String poo() { return "Cat-poo"; }
   } 


   3) 사용클래스 - AnimalFarm 
   package com.company.ioc;

   public class AnimalFarm {
      private String name;
      private Animal ani;
   
      public AnimalFarm() { super(); }
      public String getName() { return name; }
      public void setName(String name) { this.name = name; }
      public Animal getani() { return ani; }
      public void setani(Animal ani) { this.ani = ani; }
   
      public String aniSleep() { return name + ">" + ani.sleep(); }
      public String aniEat()   { return name + ">" + ani.eat(); }
      public String aniPoo()   { return name + ">" + ani.poo(); }
   
      public void print() { 
         System.out.println(  aniSleep()); 
         System.out.println(  aniEat()); 
         System.out.println(  aniPoo()); 
      }

   }


QUESTION1)
   4) 설정파일  beans.xml
   [config] - beans.xml
   5) 테스트
   ver1 ) ApplicationContext  을 이용하여 
                       aniSleep() / print()를 테스트하시오.
      * assertEquals

   ver2 )  @  을 이용하여 aniSleep() / print()를 테스트하시오.
      * assertEquals




QUESTION1)  DI -   property 를 이용하여 셋팅하고 JUnit Test를 하시오
--1-1 com.company.test1  [ AnimalFarm ]
public class AnimalFarm1 {
   private String name;
   private Animal1 ani;  
}

--1-2 com.company.config   [ test1.xml] 
public void test1() {
   AnimalFarm1 farm = (AnimalFarm1) context.getBean("animalFarm1"); 
   farm.print();
}



QUESTION2)  DI -   constructor 를 이용하여 셋팅하고 JUnit Test를 하시오
--2-1 com.company.test2  [ AnimalFarm ]
public class AnimalFarm2 {
   private String name;
   private Animal ani;  
   public AnimalFarm2 (  String name, Animal ani ){  this.name=name;  this.ani = ani ;}
}

--2-2 com.company.config  [test2.xml]



------------------
#3 Bean
------------------
▶1. Bean?
1. bean spring 이 관리하는 객체
2. xml vs Annotation
  2-1 xml [운영]
  - 모든 bean을 명시적으로 xml 에 등록
  - 여러개발자가 같은 설정파일을 공유해서 개발하면 수정시 충돌이 일어날 경우가 많음.
  2-2 Annotation (Bean Scaning) [개발]
  - Bean @을 붙여서 자동인식
  - 개발속도 향상
  - Bean 간의 의존관계를 파악하기 힘듦

▶2. @Component
1. @Component 일반적인 컴포넌트
2. @Component 구체화된 형식   @controller(웹요청받아서 응답), 
                             @Service(비지니스로직), @Repository(db연동)
<context:component-scan base-package="경로" />

==================================
실습(1) spring di 연습
==================================
    1. dynamic web project - spring003_bean
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4
    6. pom.xml 세팅 update maven까지!


 Q1.  프레임워크?

디자인패턴+라이브러리=프레임워크(개발의뼈대) 

 Q2.  IOC?

제어의 역전 인스턴스의 생명주기를 컨테이너가하는것

 Q3.  DI?

   - 각클래스의 의존관계를  [ 설정파일 ]을 통해서 컨테이너가 자동연결

 Q4.  BEAN? 

스플링이 관리하는 객체

 Q5. 스프링에서 다음에 해당하는 설정파일을 작성하시오
------------------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!--  Q5-1. Cat  cat    = new Cat()     Cat클래스의 위치  test.Cat     -->
	<bean id="cat" class="test.Cat"/>

 	<!--  Q5-2. Dog  dog = new Dog()     Dog클래스의 위치  test.Dog   --> 
 	<bean id="dog" class="test.Dog"/>

	<!--  Q5-3. AnimalFarm  animalFarm = new AnimalFarm()     AnimalFarm 클래스의 위치  test.AnimalFarm 
		 animalFarm.setName("sally");
		 animalFarm.setAni(    cat );
	--> 
	<bean id="animalFarm" class="test.AnimalFarm">
		<property name="name" value="sally" />
		<property name="ani" ref="cat" />
	</bean>
</beans>

------------------------------------------------------------------------------------------


Q6.  스프링에서 다음에 해당하는 설정파일을 작성하시오
------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- Cat  cat = new Cat()  Cat클래스의 위치  test.Cat     --> 
	<bean id="cat" class="test.Cat"/>
	<!-- Dog  dog = new Dog()  Dog클래스의 위치  test.Dog     --> 
 	<bean id="dog" class="test.Dog"/> 		
	<!-- constructor    AnimalFarm 클래스의 위치  test.AnimalFarm 
	 AnimalFarm animalFarm  = new AnimalFarm( "alpha" , dog);
	-->
	<bean id="animalFarm" class="test.AnimalFarm">
		<constructor-arg index="0" value="sally" />
		<constructor-arg index="1" ref="dog" />
	</bean>
</beans>

------------------------------------------------------------------------------------------

Q7. 설정파일에  @Annotation을 이용하여 bean을 사용하려고  한다. 
7-1. 각 클래스에 붙여야 할것은?    ( @Component )
@Contrller @Repository @Service
7-2. 설정파일에는  ( <context:component-scan base-pakage=""/> ) 

Q8.   spring project 만들기  
    1. dynamic web project - spring006_jdbc
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path


------------------
#4 DB/MYBATIS
------------------
▶1. DataSource
SimpleDriverDataSource 가장단순버전
- getConnection() 매번생성

// mvnrepository.com
>mysql-connector-java / spring-jdbc

<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.28</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>4.3.20.RELEASE</version>
</dependency>

▶2. Mybatis 
1. sql 을 별도로 파일분리해서 관리
2. ORM (object relational mapping)
3. mybatis
========================
#1.SqlSessionFactoryBean
         ↓
#2.SqlSessionFactory → <<SqlSession>> → mapper.xml
                        (insert,update,delete,select,,,,)
※SqlSessionFactory : SqlSession 생성관리
※SqlSession : sql실행, 트랜잭션
========================
4. 실습
   mybatis
   mybatis-spring

   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.5.6</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>2.0.6</version>
   </dependency>

5. 설정파일
https://mybatis.org/mybatis-3/ --> 시작하기

   ## mapper 설정파일(1)
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <mapper namespace="org.mybatis.example.BlogMapper">
   </mapper>
   
   ## mapper 설정파일(2)  
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
   </configuration>


7-2.  Dto (UserDto)
  [com.company.dto] - UserDto
   private int  no;
   private String name;
   private int  age;
   
   // 생성자, tostring, getters/setters

   * [config] - mybatis-config.xml mapper에서 사용할 UserDto 등록

7-3.  Dao ( UserDao , UserDaoImpl ,  user-mapper.xml )


▶3.  Mybatis  ex
    1. dynamic web project - spring005_ex_board
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4       
    6. pom.xml 셋팅   > junit, context, spring-test      ■[프로젝트만들기]

Q1. spring project spring005_ex_board만들기
Q2. Datasource를 셋팅하고 
     db.properties를 이용하여   datasource를 연동하시오 > SimpleDriverDataSource
Q3. Mybatis를 셋팅하고 
     다음 테이블의 crud를 테스트하시오.
 [com.company.dto]  - BoardDto                      mybatis-config.xml
 [com.company.dao] - BoardDao  /  BoardDaoImpl /  board-mapper.xml 

mysql> desc sboard;
+----------+---------------+------+-----+-------------------+-------------------+
| Field    | Type          | Null | Key | Default           | Extra             |
+----------+---------------+------+-----+-------------------+-------------------+
| bno      | int           | NO   | PRI | NULL              | auto_increment    |
| bname    | varchar(100)  | NO   |     | NULL              |                   |
| bpass    | varchar(50)   | NO   |     | NULL              |                   |
| btitle   | varchar(1000) | NO   |     | NULL              |                   |
| bcontent | text          | NO   |     | NULL              |                   |
| bdate    | timestamp     | NO   |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
| bhit     | int           | NO   |     | 0                 |                   |
| bip      | varchar(50)   | NO   |     | NULL              |                   |
+----------+---------------+------+-----+-------------------+-------------------+
8 rows in set (0.00 sec)



Q1. [spring test] SPRING에서 JunitTest를  하려고 한다 
      pom에서 다운로드 받을때 필요한 것은?  ( junit , spring-context   , spring-test  )
Q2. [mysql 연동] SPRING에서 MYSQL를 연동하려고 한다 
      pom에서 다운로드 받을때 필요한 것은?  (mysql-connector-java  ,   spring-jdbc)
Q3.[mybatis 연동] spring에서 mybatis를 사용하려고 한다.
      pom에서 다운로드 받을때 필요한 것은?  (  mybatis ,  mybatis-spring   )

Q4. root-context.xml 에서 DataSource를 연동하려고 한다.  필요한 클래스이름은?
       SimpleDriverDataSource

Q5. 위의 클래스에서 Setter를 이용하여 Property를 지정하려고한다.  
     property 이름을 적으시오.  (    driverClass     , url ,  username ,   password)
Q6. mybatis에  (  sqlSessionFactory )는   sqlSession을 생성 및 관리,  
                     (  sqlSession           ) 은 sql을 실행한다.

Q7.  다음을 작성하시오.
7-1. spring project    -  spring006_mybatis2만들기
7-2. Datasource를 셋팅하고   db.properties를 이용하여   datasource를 연동하시오 > SimpleDriverDataSource
7-3. Mybatis를 셋팅하고   다음 테이블의 crud를 테스트하시오.
select now() 

-------------------------------
#5. DB / MYBATIS (2)
-------------------------------

▶1.  mybatis (1)
- TestDao, Impl, mapper.xml 의 파일량줄이기
-  SqlSession sqlSession , namespace="com.company.dao.TestDao" 코드안에 있어서 불편, 설정파일설정
TestDao <<interface>>
    ↑   
TestDaoImpl <<class>>
====================
   @Repository
   public class TestDaoImpl implements TestDao{
      @Autowired  private SqlSession sqlSession;  //sql 실행
      ivate static final String namespace="com.company.dao.TestDao";   ... 코드생략
   }
====================
test-mapper.xml

▶2. mybatis (2)
-root-context.xml 설정파일

before: 구현클래스 삭제 
@Autowired  private SqlSession sqlSession;  //sql 실행
ivate static final String namespace="com.company.dao.TestDao";


after: root-context.xml 설정
<bean id="" clss="MapperFactoryBean">

</bean>

1. 006_1 mybatis 프로젝트 복사
2. 006_2 mybatis 프로젝트 복사 - Ipml 구현클래스삭제 / root-context 수정

연습문제) BoardTestEx 가서 MapperFactoryBean 버전으로 수정

▶3. mybatis (3)
- MapperFactoryBean 매번 설정이 힘듦. 모든 mapper에 설정하기 힘듦

- 해결방안 : MapperScannerConfigurer
1. MyDao
   public @interface MyDao{}
2. mapper로 만들어주는 interface 
   @MyDao public interface TestDao{}
   @MyDao public interface UserDao{}
   @MyDao public interface BoardDao{}
3. MyDao root-context.xml 등록
<bean id="" class="MapperScannerConfigurer">
</baen>

-------------------------------
#6. mvc project
-------------------------------
▶1. mvc
>> 서로 영향없이 쉽게 고칠수 있는 애플리케이션을 만들자!
Model       - 정보 (dto,dao, service)
View        - 화면 (html/css/is/jquery)
Controller  - 처리 (요청을 받아서 처리후 응답)

▶2. mvc1 vs mvc2
mvc1 - controller의 역할을 jsp 담당
mvc2 - controller의 역할을 servlet 담당
frontcontroller - 공통작업수행 → 세부컨트롤러 처리 

▶3. spring MVC
[client]
↓ ① list.do
[frontcontroller]
<<DispatcherServlet>> → ② HandlerMapping - @Controller
                               ↓
                        ③ 세부Controller - db가 필요하면 db처리
                              ↓↑
                           ④ View

① 클라이언트 (코요테 - web.xml - root-context.xml / servlet-context.xml)
② DispatcherServlet - HandlerMapping - @Controller / 처리할 Controller 확인
③ 세부Controller 클라이언트 요청처리 (service - 비지니스로직)
④ 요청결과와 View정보를 DispatcherServlet 줌 / View를 개체를 생성해서 응답

1. 실습 
1) pom.xml spring-webmvc 등록
2) web.xml ContextLoaderListner (스프링구동) / DispatcherServlet (Frontcontroller)
               root-context.xml (db설정) / servlet-context.xml (view servlet 설정)
3) config/servlet-context.xml

2. 실습
1) spring010_mvc 만들기
2) pom.xml
   <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
   <dependency>
       <groupId>org.springframework</groupId>
       <artifactId>spring-webmvc</artifactId>
       <version>3.2.17.RELEASE</version>
   </dependency>
3) web.xml
   ContextLoaderListner (스프링구동) / DispatcherServlet (Frontcontroller)
         root-context.xml (db설정) / servlet-context.xml (view servlet 설정)
4) servlet.xml
   4-1. @Controller 위치
      <context:component-scan base-package="com.company.controller" />
   4-2. Model model (처리결과)
      <mvc:annotation-driven/>
   4-3. ViewResolver
   <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"/>
		<property name="suffix" value=".jsp"/>
	</bean>


==================================
#7. 유용한 기능들
==================================
1. jstl
2. dto → lombok
3. aop (관점지향)
4. HikariCP (dbcp / sql 과정 다 보이게)
5. Tx ( sql 여러개 실행될 때 중간에 실패하면 sql 다 처리 안되게)

----------------------------------
▶ jstl
1. pom.xml
      <!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>jstl</artifactId>
         <version>1.2</version>
      </dependency>

2. Model
- table
- dto UserDto / mapper-config.xml
- dao UserDao / user-mapper.xml / root-context.xml(등록)

3. @Repository Dao (sql 실행)
   @Service - 비지니스로직 처리하는기능
   상세보기 : 조회수올리는 sql / 해당번호 상세보기 데이터
   수정보기 : 해당번호 상세보기 데이터
   글쓰기 : 이미지올리기기능 / 그이미지이름경로 insert시 저장

----------------------------------
▶ dto → lombok
   0. https://mvnrepository.com/artifact/org.projectlombok/lombok

   <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
   <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.18</version>
      <scope>provided</scope>
   </dependency>

   1. https://projectlombok.org/download
   2. 다운로드
   3. 더블클릭 /   cmd창     java  -jar    파일이름.jar
      설치경로 설정
   4. spring 다시 열기

   ※ 만약 인식이 안되면....
   1. C드라이브로 스프링zip. 옮기기 - 압축풀기
   2. 경로 짧게

   Errors occurred during the build
   STS.ini 열어서 마지막에 추가
   --add-opens=java.base/java.lang=ALL-UNNAMED

----------------------------------
▶ aop (관점지향)
1) 핵심기능 vs 부가기능
- 핵심기능 : 비지니스로직
- 부가기능 : 비지니스로직 도와주는기능

2) Aspect
- AOP (Aspect Oriented Programming)
- Aspect : 관점, 어떤핸동, 시작, 완료, 반복,,,,, 나타내는 형태
- Advice(부가기능정의) + PointCut(적용부위) = Aspect

3) 용어
Target : 대상
Advice : 부가기능정의
PointCut : 적용타겟에 메서드로 대상을 선별하는 정규식
Weaving : Target(대상)에 Adivice(부가기능)를 처리(삽입) 과정

4) 특징
- 프록시기반의 aop
- 프록시(대리)
- 프록시 Target(대상)에 Adivice(부가기능)를 처리(삽입) 과정에서 생성되는 객체

호출 → [Proxy[Target]]

<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjrt</artifactId>
    <version>1.7.3</version>
    <scope>runtime</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.7.3</version>
    <scope>runtime</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-aop</artifactId>
    <version>4.3.28.RELEASE</version>
</dependency>

----------------------------------
▶ HikariCP (dbcp / sql 과정 다 보이게)
1) pom.xml

      <!-- HikariCP -->
      <!-- HikariCP -->
      <!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
      <dependency>
          <groupId>com.zaxxer</groupId>
          <artifactId>HikariCP</artifactId>
          <version>2.7.4</version>
      </dependency>
         
      <!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
      <dependency>
          <groupId>org.bgee.log4jdbc-log4j2</groupId>
          <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
          <version>1.16</version>
      </dependency>
      <!-- HikariCP -->
      <!-- HikariCP -->
      <!-- HikariCP -->

2) db.properties / root-context.xml
3) hikari properties 설정

----------------------------------
▶ Tx ( sql 여러개 실행될 때 중간에 실패하면 sql 다 처리 안되게)
- 트랜잭션
- 여러단계의 처리를 하나의 처리처럼 다루는 기능
- 반영(commit) / 되돌리기 (rollback)

1) pom.xml
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-tx</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>
2) root-context.xml
- DataSourceTransactionManager
- <tx:annotion-driven/>



==================================
#8. restful
==================================

















































